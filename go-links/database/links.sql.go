// Code generated by sqlc. DO NOT EDIT.
// source: links.sql

package database

import (
	"context"

	"github.com/segmentio/ksuid"
)

const createLink = `-- name: CreateLink :one
INSERT INTO links
    (id, short_url, destination_url, description)
VALUES ($1, $2, $3, $4)
RETURNING id, short_url, destination_url, description, created_at, updated_at
`

type CreateLinkParams struct {
	ID             ksuid.KSUID
	ShortURL       string
	DestinationURL string
	Description    string
}

func (q *Queries) CreateLink(ctx context.Context, arg CreateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, createLink,
		arg.ID,
		arg.ShortURL,
		arg.DestinationURL,
		arg.Description,
	)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.ShortURL,
		&i.DestinationURL,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLink = `-- name: GetLink :one
SELECT id, short_url, destination_url, description, created_at, updated_at
FROM links
WHERE id = $1
`

func (q *Queries) GetLink(ctx context.Context, id ksuid.KSUID) (Link, error) {
	row := q.db.QueryRowContext(ctx, getLink, id)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.ShortURL,
		&i.DestinationURL,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getLinkByShortURL = `-- name: GetLinkByShortURL :one
SELECT id, short_url, destination_url, description, created_at, updated_at
FROM links
WHERE short_url = $1
`

func (q *Queries) GetLinkByShortURL(ctx context.Context, shortUrl string) (Link, error) {
	row := q.db.QueryRowContext(ctx, getLinkByShortURL, shortUrl)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.ShortURL,
		&i.DestinationURL,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listRecentLinks = `-- name: ListRecentLinks :many
SELECT id, short_url, destination_url, description, created_at, updated_at
FROM links
ORDER BY created_at DESC
LIMIT 30
`

func (q *Queries) ListRecentLinks(ctx context.Context) ([]Link, error) {
	rows, err := q.db.QueryContext(ctx, listRecentLinks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Link
	for rows.Next() {
		var i Link
		if err := rows.Scan(
			&i.ID,
			&i.ShortURL,
			&i.DestinationURL,
			&i.Description,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateLink = `-- name: UpdateLink :one
UPDATE links
SET short_url       = $2,
    destination_url = $3,
    description     = $4
WHERE id = $1
RETURNING id, short_url, destination_url, description, created_at, updated_at
`

type UpdateLinkParams struct {
	ID             ksuid.KSUID
	ShortURL       string
	DestinationURL string
	Description    string
}

func (q *Queries) UpdateLink(ctx context.Context, arg UpdateLinkParams) (Link, error) {
	row := q.db.QueryRowContext(ctx, updateLink,
		arg.ID,
		arg.ShortURL,
		arg.DestinationURL,
		arg.Description,
	)
	var i Link
	err := row.Scan(
		&i.ID,
		&i.ShortURL,
		&i.DestinationURL,
		&i.Description,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
