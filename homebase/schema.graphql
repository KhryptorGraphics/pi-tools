scalar Cursor
scalar Time

interface Node {
    id: ID!
}

type Query {
    viewer: Viewer
    node(id: ID!): Node
}

type Mutation {
    ignoreTrip(input: IgnoreTripInput!): IgnoreTripPayload!
    updateTripTags(input: UpdateTripTagsInput!): UpdateTripTagsPayload!
}

type Viewer {
    trips(
        first: Int
        after: Cursor
    ): TripConnection

    trip(id: ID!): Trip

    tags(
        first: Int
        after: Cursor
    ): TagConnection

    mostRecentDeploy: Deploy
}

type PageInfo {
    startCursor: Cursor
    endCursor: Cursor
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

type TripConnection {
    edges: [TripEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type TripEdge {
    node: Trip!
    cursor: Cursor!
}

type Trip implements Node {
    id: ID!
    rawID: String!
    leftAt: Time!
    returnedAt: Time
    tags: [String!]!
}

type TagConnection {
    edges: [TagEdge!]!
    pageInfo: PageInfo!
    totalCount: Int!
}

type TagEdge {
    node: Tag!
    cursor: Cursor!
}

type Tag {
    name: String!
    tripCount: Int!
}

type Deploy {
    id: ID!
    commitSHA: String!
    commitMessage: String!
    state: DeployState!
    startedAt: Time!
    finishedAt: Time
}

enum DeployState {
    UNKNOWN
    PENDING
    IN_PROGRESS
    SUCCESS
    FAILURE
    INACTIVE
}

input IgnoreTripInput {
    id: ID!
}

type IgnoreTripPayload {
    ignoredTripID: ID!
}

input UpdateTripTagsInput {
    tripID: ID!
    tagsToAdd: [String!]!
    tagsToRemove: [String!]!
}

type UpdateTripTagsPayload {
    trip: Trip
}
