apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: monitoring
  name: grafana
  labels:
    app: grafana
spec:
  replicas: 3
  strategy:
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
        linkerd.io/inject: enabled
    spec:
      containers:
        - image: index.docker.io/mmoriarity/grafana:latest
          name: grafana
          env:
            - name: GF_LOG_LEVEL
              value: info
            - name: GF_DATABASE_TYPE
              value: postgres
            - name: GF_DATABASE_HOST
              value: postgresql.storage
            - name: GF_DATABASE_NAME
              value: grafana
            - name: GF_DATABASE_USER
              value: grafana
            - name: GF_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana
                  key: db-password
            - name: GF_DATABASE_SSL_MODE
              value: disable
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
            - name: GF_USERS_AUTO_ASSIGN_ORG
              value: "true"
            - name: GF_USERS_AUTO_ASSIGN_ORG_ROLE
              value: "admin"
            - name: GF_AUTH_PROXY_ENABLED
              value: "true"
            - name: GF_AUTH_PROXY_HEADER_NAME
              value: "X-Auth-Request-User"
            - name: GF_AUTH_PROXY_AUTO_SIGN_UP
              value: "true"
            - name: GF_AUTH_PROXY_HEADERS
              value: "Email:X-Auth-Request-Email"
            - name: GF_AUTH_PROXY_ENABLE_LOGIN_TOKEN
              value: "false"
          resources:
            requests:
              cpu: "100m"
              memory: "75M"
            limits:
              memory: "150M"
          readinessProbe:
            httpGet:
              port: http
              path: /api/health
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
          volumeMounts:
            - name: grafana-data
              mountPath: /var/lib/grafana
            - name: grafana-dashboards
              mountPath: /etc/grafana/dashboards
              readOnly: true
      volumes:
        - name: grafana-data
          persistentVolumeClaim:
            claimName: grafana-data
        - name: grafana-dashboards
          configMap:
            name: provisioned-dashboards
