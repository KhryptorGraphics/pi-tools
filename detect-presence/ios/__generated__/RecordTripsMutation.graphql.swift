// Auto-generated by relay-compiler. Do not edit.

import Relay

public struct RecordTripsMutation {
    public var variables: Variables

    public init(variables: Variables) {
        self.variables = variables
    }

    public static var node: ConcreteRequest {
        ConcreteRequest(
            fragment: ReaderFragment(
                name: "RecordTripsMutation",
                type: "Mutation",
                selections: [
                    .field(ReaderLinkedField(
                        name: "recordTrips",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "RecordTripsPayload",
                        plural: false,
                        selections: [
                            .field(ReaderLinkedField(
                                name: "recordedTrips",
                                concreteType: "Trip",
                                plural: true,
                                selections: [
                                    .field(ReaderScalarField(
                                        name: "id"
                                    )),
                                    .field(ReaderScalarField(
                                        name: "leftAt"
                                    )),
                                    .field(ReaderScalarField(
                                        name: "returnedAt"
                                    ))
                                ]
                            )),
                            .field(ReaderLinkedField(
                                name: "failures",
                                concreteType: "TripRecordingFailure",
                                plural: true,
                                selections: [
                                    .field(ReaderScalarField(
                                        name: "tripID"
                                    )),
                                    .field(ReaderScalarField(
                                        name: "message"
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            operation: NormalizationOperation(
                name: "RecordTripsMutation",
                selections: [
                    .field(NormalizationLinkedField(
                        name: "recordTrips",
                        args: [
                            VariableArgument(name: "input", variableName: "input")
                        ],
                        concreteType: "RecordTripsPayload",
                        plural: false,
                        selections: [
                            .field(NormalizationLinkedField(
                                name: "recordedTrips",
                                concreteType: "Trip",
                                plural: true,
                                selections: [
                                    .field(NormalizationScalarField(
                                        name: "id"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "leftAt"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "returnedAt"
                                    ))
                                ]
                            )),
                            .field(NormalizationLinkedField(
                                name: "failures",
                                concreteType: "TripRecordingFailure",
                                plural: true,
                                selections: [
                                    .field(NormalizationScalarField(
                                        name: "tripID"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "message"
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            params: RequestParameters(
                name: "RecordTripsMutation",
                operationKind: .mutation,
                text: """
mutation RecordTripsMutation(
  $input: RecordTripsInput!
) {
  recordTrips(input: $input) {
    recordedTrips {
      id
      leftAt
      returnedAt
    }
    failures {
      tripID
      message
    }
  }
}
"""
            )
        )
    }
}

extension RecordTripsMutation {
    public struct Variables: VariableDataConvertible {
        public var input: RecordTripsInput

        public init(input: RecordTripsInput) {
            self.input = input
        }

        public var variableData: VariableData {
            [
                "input": input
            ]
        }
    }

    public init(input: RecordTripsInput) {
        self.init(variables: .init(input: input))
    }
}

#if canImport(RelaySwiftUI)
import RelaySwiftUI

extension RelaySwiftUI.Query.WrappedValue where O == RecordTripsMutation {
    public func get(input: RecordTripsInput, fetchKey: Any? = nil) -> RelaySwiftUI.Query<RecordTripsMutation>.Result {
        self.get(.init(input: input), fetchKey: fetchKey)
    }
}
#endif

#if canImport(RelaySwiftUI)
import RelaySwiftUI

extension RelaySwiftUI.RefetchableFragment.Wrapper where F.Operation == RecordTripsMutation {
    public func refetch(input: RecordTripsInput) {
        self.refetch(.init(input: input))
    }
}
#endif

public struct RecordTripsInput: VariableDataConvertible {
    public var trips: [NewTripInput]

    public init(trips: [NewTripInput]) {
        self.trips = trips
    }

    public var variableData: VariableData {
        [
            "trips": trips
        ]
    }
}


public struct NewTripInput: VariableDataConvertible {
    public var id: String
    public var leftAt: String
    public var returnedAt: String

    public init(id: String, leftAt: String, returnedAt: String) {
        self.id = id
        self.leftAt = leftAt
        self.returnedAt = returnedAt
    }

    public var variableData: VariableData {
        [
            "id": id,
            "leftAt": leftAt,
            "returnedAt": returnedAt
        ]
    }
}


extension RecordTripsMutation {
    public struct Data: Decodable {
        public var recordTrips: RecordTripsPayload_recordTrips

        public struct RecordTripsPayload_recordTrips: Decodable {
            public var recordedTrips: [Trip_recordedTrips]
            public var failures: [TripRecordingFailure_failures]

            public struct Trip_recordedTrips: Decodable, Identifiable {
                public var id: String
                public var leftAt: String
                public var returnedAt: String?
            }

            public struct TripRecordingFailure_failures: Decodable {
                public var tripID: String
                public var message: String
            }
        }
    }
}

extension RecordTripsMutation: Relay.Operation {}