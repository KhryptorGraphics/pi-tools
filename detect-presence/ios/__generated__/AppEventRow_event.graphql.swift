// Auto-generated by relay-compiler. Do not edit.

import Relay

public struct AppEventRow_event {
    public var fragmentPointer: FragmentPointer

    public init(key: AppEventRow_event_Key) {
        fragmentPointer = key.fragment_AppEventRow_event
    }

    public static var node: ReaderFragment {
        ReaderFragment(
            name: "AppEventRow_event",
            type: "AppEvent",
            selections: [
                .clientExtension(ReaderClientExtension(
                    selections: [
                        .field(ReaderScalarField(
                            name: "id"
                        )),
                        .field(ReaderScalarField(
                            name: "timestamp"
                        )),
                        .inlineFragment(ReaderInlineFragment(
                            type: "BeaconEvent",
                            selections: [
                                .field(ReaderScalarField(
                                    name: "action"
                                ))
                            ]
                        )),
                        .inlineFragment(ReaderInlineFragment(
                            type: "TripBeganEvent",
                            selections: [
                                .field(ReaderLinkedField(
                                    name: "trip",
                                    concreteType: "Trip",
                                    plural: false,
                                    selections: [
                                        .field(ReaderScalarField(
                                            name: "id"
                                        ))
                                    ]
                                ))
                            ]
                        )),
                        .inlineFragment(ReaderInlineFragment(
                            type: "TripEndedEvent",
                            selections: [
                                .field(ReaderLinkedField(
                                    name: "queuedTrips",
                                    concreteType: "Trip",
                                    plural: true,
                                    selections: [
                                        .field(ReaderScalarField(
                                            name: "id"
                                        ))
                                    ]
                                ))
                            ]
                        )),
                        .inlineFragment(ReaderInlineFragment(
                            type: "TripDiscardedEvent",
                            selections: [
                                .field(ReaderLinkedField(
                                    name: "trip",
                                    concreteType: "Trip",
                                    plural: false,
                                    selections: [
                                        .field(ReaderScalarField(
                                            name: "id"
                                        )),
                                        .field(ReaderScalarField(
                                            name: "leftAt"
                                        )),
                                        .field(ReaderScalarField(
                                            name: "returnedAt"
                                        ))
                                    ]
                                ))
                            ]
                        )),
                        .inlineFragment(ReaderInlineFragment(
                            type: "RecordedTripsEvent",
                            selections: [
                                .field(ReaderLinkedField(
                                    name: "recordedTrips",
                                    concreteType: "Trip",
                                    plural: true,
                                    selections: [
                                        .field(ReaderScalarField(
                                            name: "id"
                                        ))
                                    ]
                                ))
                            ]
                        )),
                        .inlineFragment(ReaderInlineFragment(
                            type: "RecordFailedEvent",
                            selections: [
                                .field(ReaderScalarField(
                                    name: "message"
                                ))
                            ]
                        ))
                    ]
                ))
            ]
        )
    }
}

extension AppEventRow_event {
    public enum Data: Decodable, Identifiable {
        case beaconEvent(BeaconEvent)
        case tripBeganEvent(TripBeganEvent)
        case tripEndedEvent(TripEndedEvent)
        case tripDiscardedEvent(TripDiscardedEvent)
        case recordedTripsEvent(RecordedTripsEvent)
        case recordFailedEvent(RecordFailedEvent)
        case appEvent(AppEvent)

        private enum TypeKeys: String, CodingKey {
            case __typename
        }

        public init(from decoder: Decoder) throws {
            let container = try decoder.container(keyedBy: TypeKeys.self)
            let typeName = try container.decode(String.self, forKey: .__typename)
            switch typeName {
            case "BeaconEvent":
                self = .beaconEvent(try BeaconEvent(from: decoder))
            case "TripBeganEvent":
                self = .tripBeganEvent(try TripBeganEvent(from: decoder))
            case "TripEndedEvent":
                self = .tripEndedEvent(try TripEndedEvent(from: decoder))
            case "TripDiscardedEvent":
                self = .tripDiscardedEvent(try TripDiscardedEvent(from: decoder))
            case "RecordedTripsEvent":
                self = .recordedTripsEvent(try RecordedTripsEvent(from: decoder))
            case "RecordFailedEvent":
                self = .recordFailedEvent(try RecordFailedEvent(from: decoder))
            default:
                self = .appEvent(try AppEvent(from: decoder))
            }
        }

        public var asBeaconEvent: BeaconEvent? {
            if case .beaconEvent(let val) = self {
                return val
            }
            return nil
        }

        public var asTripBeganEvent: TripBeganEvent? {
            if case .tripBeganEvent(let val) = self {
                return val
            }
            return nil
        }

        public var asTripEndedEvent: TripEndedEvent? {
            if case .tripEndedEvent(let val) = self {
                return val
            }
            return nil
        }

        public var asTripDiscardedEvent: TripDiscardedEvent? {
            if case .tripDiscardedEvent(let val) = self {
                return val
            }
            return nil
        }

        public var asRecordedTripsEvent: RecordedTripsEvent? {
            if case .recordedTripsEvent(let val) = self {
                return val
            }
            return nil
        }

        public var asRecordFailedEvent: RecordFailedEvent? {
            if case .recordFailedEvent(let val) = self {
                return val
            }
            return nil
        }

        public var id: String {
            switch self {
            case .beaconEvent(let val):
                return val.id
            case .tripBeganEvent(let val):
                return val.id
            case .tripEndedEvent(let val):
                return val.id
            case .tripDiscardedEvent(let val):
                return val.id
            case .recordedTripsEvent(let val):
                return val.id
            case .recordFailedEvent(let val):
                return val.id
            case .appEvent(let val):
                return val.id
            }
        }

        public var timestamp: String {
            switch self {
            case .beaconEvent(let val):
                return val.timestamp
            case .tripBeganEvent(let val):
                return val.timestamp
            case .tripEndedEvent(let val):
                return val.timestamp
            case .tripDiscardedEvent(let val):
                return val.timestamp
            case .recordedTripsEvent(let val):
                return val.timestamp
            case .recordFailedEvent(let val):
                return val.timestamp
            case .appEvent(let val):
                return val.timestamp
            }
        }

        public struct BeaconEvent: Decodable, Identifiable {
            public var id: String
            public var timestamp: String
            public var action: BeaconAction
        }

        public struct TripBeganEvent: Decodable, Identifiable {
            public var id: String
            public var timestamp: String
            public var trip: Trip_trip

            public struct Trip_trip: Decodable, Identifiable {
                public var id: String
            }
        }

        public struct TripEndedEvent: Decodable, Identifiable {
            public var id: String
            public var timestamp: String
            public var queuedTrips: [Trip_queuedTrips]

            public struct Trip_queuedTrips: Decodable, Identifiable {
                public var id: String
            }
        }

        public struct TripDiscardedEvent: Decodable, Identifiable {
            public var id: String
            public var timestamp: String
            public var trip: Trip_trip

            public struct Trip_trip: Decodable, Identifiable {
                public var id: String
                public var leftAt: String
                public var returnedAt: String?
            }
        }

        public struct RecordedTripsEvent: Decodable, Identifiable {
            public var id: String
            public var timestamp: String
            public var recordedTrips: [Trip_recordedTrips]

            public struct Trip_recordedTrips: Decodable, Identifiable {
                public var id: String
            }
        }

        public struct RecordFailedEvent: Decodable, Identifiable {
            public var id: String
            public var timestamp: String
            public var message: String
        }

        public struct AppEvent: Decodable, Identifiable {
            public var id: String
            public var timestamp: String
        }
    }
}

public protocol AppEventRow_event_Key {
    var fragment_AppEventRow_event: FragmentPointer { get }
}

public enum BeaconAction: String, Decodable, Hashable, VariableValueConvertible, ReadableScalar, CustomStringConvertible {
    case entered = "ENTERED"
    case exited = "EXITED"
    public var description: String {
        rawValue
    }
}

extension AppEventRow_event: Relay.Fragment {}

#if canImport(RelaySwiftUI)
import RelaySwiftUI

extension AppEventRow_event_Key {
    public func asFragment() -> RelaySwiftUI.Fragment<AppEventRow_event> {
        RelaySwiftUI.Fragment<AppEventRow_event>(self)
    }
}
#endif