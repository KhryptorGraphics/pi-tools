// Auto-generated by relay-compiler. Do not edit.

import Relay

public struct TripsTabQuery {
    public var variables: Variables

    public init(variables: Variables) {
        self.variables = variables
    }

    public static var node: ConcreteRequest {
        ConcreteRequest(
            fragment: ReaderFragment(
                name: "TripsTabQuery",
                type: "Query",
                selections: [
                    .field(ReaderLinkedField(
                        name: "viewer",
                        concreteType: "Viewer",
                        plural: false,
                        selections: [
                            .field(ReaderLinkedField(
                                name: "__TripsPageQuery_trips_connection",
                                alias: "trips",
                                concreteType: "TripConnection",
                                plural: false,
                                selections: [
                                    .field(ReaderLinkedField(
                                        name: "edges",
                                        concreteType: "TripEdge",
                                        plural: true,
                                        selections: [
                                            .field(ReaderLinkedField(
                                                name: "node",
                                                concreteType: "Trip",
                                                plural: false,
                                                selections: [
                                                    .field(ReaderScalarField(
                                                        name: "id"
                                                    )),
                                                    .field(ReaderScalarField(
                                                        name: "__typename"
                                                    )),
                                                    .fragmentSpread(ReaderFragmentSpread(
                                                        name: "TripRow_trip"
                                                    ))
                                                ]
                                            )),
                                            .field(ReaderScalarField(
                                                name: "cursor"
                                            ))
                                        ]
                                    )),
                                    .field(ReaderLinkedField(
                                        name: "pageInfo",
                                        concreteType: "PageInfo",
                                        plural: false,
                                        selections: [
                                            .field(ReaderScalarField(
                                                name: "endCursor"
                                            )),
                                            .field(ReaderScalarField(
                                                name: "hasNextPage"
                                            ))
                                        ]
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            operation: NormalizationOperation(
                name: "TripsTabQuery",
                selections: [
                    .field(NormalizationLinkedField(
                        name: "viewer",
                        concreteType: "Viewer",
                        plural: false,
                        selections: [
                            .field(NormalizationLinkedField(
                                name: "trips",
                                args: [
                                    LiteralArgument(name: "first", value: 30)
                                ],
                                storageKey: "trips(first:30)",
                                concreteType: "TripConnection",
                                plural: false,
                                selections: [
                                    .field(NormalizationLinkedField(
                                        name: "edges",
                                        concreteType: "TripEdge",
                                        plural: true,
                                        selections: [
                                            .field(NormalizationLinkedField(
                                                name: "node",
                                                concreteType: "Trip",
                                                plural: false,
                                                selections: [
                                                    .field(NormalizationScalarField(
                                                        name: "id"
                                                    )),
                                                    .field(NormalizationScalarField(
                                                        name: "leftAt"
                                                    )),
                                                    .field(NormalizationScalarField(
                                                        name: "returnedAt"
                                                    )),
                                                    .field(NormalizationScalarField(
                                                        name: "tags"
                                                    )),
                                                    .field(NormalizationScalarField(
                                                        name: "__typename"
                                                    ))
                                                ]
                                            )),
                                            .field(NormalizationScalarField(
                                                name: "cursor"
                                            ))
                                        ]
                                    )),
                                    .field(NormalizationLinkedField(
                                        name: "pageInfo",
                                        concreteType: "PageInfo",
                                        plural: false,
                                        selections: [
                                            .field(NormalizationScalarField(
                                                name: "endCursor"
                                            )),
                                            .field(NormalizationScalarField(
                                                name: "hasNextPage"
                                            ))
                                        ]
                                    ))
                                ]
                            )),
                            .handle(NormalizationHandle(
                                kind: .linked,
                                name: "trips",
                                args: [
                                    LiteralArgument(name: "first", value: 30)
                                ],
                                handle: "connection",
                                key: "TripsPageQuery_trips"
                            ))
                        ]
                    ))
                ]
            ),
            params: RequestParameters(
                name: "TripsTabQuery",
                operationKind: .query,
                text: """
query TripsTabQuery {
  viewer {
    trips(first: 30) {
      edges {
        node {
          id
          ...TripRow_trip
          __typename
        }
        cursor
      }
      pageInfo {
        endCursor
        hasNextPage
      }
    }
  }
}

fragment TripRow_trip on Trip {
  id
  leftAt
  returnedAt
  tags
}
"""
            )
        )
    }
}

extension TripsTabQuery {
    public typealias Variables = EmptyVariables
}



extension TripsTabQuery {
    public struct Data: Decodable {
        public var viewer: Viewer_viewer?

        public struct Viewer_viewer: Decodable {
            public var trips: TripConnection_trips?

            public struct TripConnection_trips: Decodable, ConnectionCollection {
                public var edges: [TripEdge_edges]

                public struct TripEdge_edges: Decodable, ConnectionEdge {
                    public var node: Trip_node

                    public struct Trip_node: Decodable, Identifiable, TripRow_trip_Key, ConnectionNode {
                        public var id: String
                        public var fragment_TripRow_trip: FragmentPointer
                    }
                }
            }
        }
    }
}

extension TripsTabQuery: Relay.Operation {}