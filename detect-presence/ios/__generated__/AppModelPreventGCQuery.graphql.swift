// Auto-generated by relay-compiler. Do not edit.

import Relay

public struct AppModelPreventGCQuery {
    public var variables: Variables

    public init(variables: Variables) {
        self.variables = variables
    }

    public static var node: ConcreteRequest {
        ConcreteRequest(
            fragment: ReaderFragment(
                name: "AppModelPreventGCQuery",
                type: "Query",
                selections: [
                    .field(ReaderScalarField(
                        name: "__typename"
                    )),
                    .clientExtension(ReaderClientExtension(
                        selections: [
                            .field(ReaderLinkedField(
                                name: "currentTrip",
                                concreteType: "Trip",
                                plural: false,
                                selections: [
                                    .field(ReaderScalarField(
                                        name: "id"
                                    ))
                                ]
                            )),
                            .field(ReaderLinkedField(
                                name: "queuedTrips",
                                concreteType: "Trip",
                                plural: true,
                                selections: [
                                    .field(ReaderScalarField(
                                        name: "id"
                                    ))
                                ]
                            )),
                            .field(ReaderLinkedField(
                                name: "appEvents",
                                plural: true,
                                selections: [
                                    .field(ReaderScalarField(
                                        name: "id"
                                    )),
                                    .inlineFragment(ReaderInlineFragment(
                                        type: "TripBeganEvent",
                                        selections: [
                                            .field(ReaderLinkedField(
                                                name: "trip",
                                                concreteType: "Trip",
                                                plural: false,
                                                selections: [
                                                    .field(ReaderScalarField(
                                                        name: "id"
                                                    ))
                                                ]
                                            ))
                                        ]
                                    )),
                                    .inlineFragment(ReaderInlineFragment(
                                        type: "TripEndedEvent",
                                        selections: [
                                            .field(ReaderLinkedField(
                                                name: "queuedTrips",
                                                concreteType: "Trip",
                                                plural: true,
                                                selections: [
                                                    .field(ReaderScalarField(
                                                        name: "id"
                                                    ))
                                                ]
                                            ))
                                        ]
                                    )),
                                    .inlineFragment(ReaderInlineFragment(
                                        type: "TripDiscardedEvent",
                                        selections: [
                                            .field(ReaderLinkedField(
                                                name: "trip",
                                                concreteType: "Trip",
                                                plural: false,
                                                selections: [
                                                    .field(ReaderScalarField(
                                                        name: "id"
                                                    ))
                                                ]
                                            ))
                                        ]
                                    )),
                                    .inlineFragment(ReaderInlineFragment(
                                        type: "RecordedTripsEvent",
                                        selections: [
                                            .field(ReaderLinkedField(
                                                name: "recordedTrips",
                                                concreteType: "Trip",
                                                plural: true,
                                                selections: [
                                                    .field(ReaderScalarField(
                                                        name: "id"
                                                    ))
                                                ]
                                            ))
                                        ]
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            operation: NormalizationOperation(
                name: "AppModelPreventGCQuery",
                selections: [
                    .field(NormalizationScalarField(
                        name: "__typename"
                    )),
                    .clientExtension(NormalizationClientExtension(
                        selections: [
                            .field(NormalizationLinkedField(
                                name: "currentTrip",
                                concreteType: "Trip",
                                plural: false,
                                selections: [
                                    .field(NormalizationScalarField(
                                        name: "id"
                                    ))
                                ]
                            )),
                            .field(NormalizationLinkedField(
                                name: "queuedTrips",
                                concreteType: "Trip",
                                plural: true,
                                selections: [
                                    .field(NormalizationScalarField(
                                        name: "id"
                                    ))
                                ]
                            )),
                            .field(NormalizationLinkedField(
                                name: "appEvents",
                                plural: true,
                                selections: [
                                    .field(NormalizationScalarField(
                                        name: "__typename"
                                    )),
                                    .field(NormalizationScalarField(
                                        name: "id"
                                    )),
                                    .inlineFragment(NormalizationInlineFragment(
                                        type: "TripBeganEvent",
                                        selections: [
                                            .field(NormalizationLinkedField(
                                                name: "trip",
                                                concreteType: "Trip",
                                                plural: false,
                                                selections: [
                                                    .field(NormalizationScalarField(
                                                        name: "id"
                                                    ))
                                                ]
                                            ))
                                        ]
                                    )),
                                    .inlineFragment(NormalizationInlineFragment(
                                        type: "TripEndedEvent",
                                        selections: [
                                            .field(NormalizationLinkedField(
                                                name: "queuedTrips",
                                                concreteType: "Trip",
                                                plural: true,
                                                selections: [
                                                    .field(NormalizationScalarField(
                                                        name: "id"
                                                    ))
                                                ]
                                            ))
                                        ]
                                    )),
                                    .inlineFragment(NormalizationInlineFragment(
                                        type: "TripDiscardedEvent",
                                        selections: [
                                            .field(NormalizationLinkedField(
                                                name: "trip",
                                                concreteType: "Trip",
                                                plural: false,
                                                selections: [
                                                    .field(NormalizationScalarField(
                                                        name: "id"
                                                    ))
                                                ]
                                            ))
                                        ]
                                    )),
                                    .inlineFragment(NormalizationInlineFragment(
                                        type: "RecordedTripsEvent",
                                        selections: [
                                            .field(NormalizationLinkedField(
                                                name: "recordedTrips",
                                                concreteType: "Trip",
                                                plural: true,
                                                selections: [
                                                    .field(NormalizationScalarField(
                                                        name: "id"
                                                    ))
                                                ]
                                            ))
                                        ]
                                    ))
                                ]
                            ))
                        ]
                    ))
                ]
            ),
            params: RequestParameters(
                name: "AppModelPreventGCQuery",
                operationKind: .query,
                text: """
query AppModelPreventGCQuery {
  __typename
}
"""
            )
        )
    }
}

extension AppModelPreventGCQuery {
    public typealias Variables = EmptyVariables
}



extension AppModelPreventGCQuery {
    public struct Data: Decodable {
        public var currentTrip: Trip_currentTrip?
        public var queuedTrips: [Trip_queuedTrips]
        public var appEvents: [AppEvent_appEvents]

        public struct Trip_currentTrip: Decodable, Identifiable {
            public var id: String
        }

        public struct Trip_queuedTrips: Decodable, Identifiable {
            public var id: String
        }

        public enum AppEvent_appEvents: Decodable, Identifiable {
            case tripBeganEvent(TripBeganEvent)
            case tripEndedEvent(TripEndedEvent)
            case tripDiscardedEvent(TripDiscardedEvent)
            case recordedTripsEvent(RecordedTripsEvent)
            case appEvent(AppEvent)

            private enum TypeKeys: String, CodingKey {
                case __typename
            }

            public init(from decoder: Decoder) throws {
                let container = try decoder.container(keyedBy: TypeKeys.self)
                let typeName = try container.decode(String.self, forKey: .__typename)
                switch typeName {
                case "TripBeganEvent":
                    self = .tripBeganEvent(try TripBeganEvent(from: decoder))
                case "TripEndedEvent":
                    self = .tripEndedEvent(try TripEndedEvent(from: decoder))
                case "TripDiscardedEvent":
                    self = .tripDiscardedEvent(try TripDiscardedEvent(from: decoder))
                case "RecordedTripsEvent":
                    self = .recordedTripsEvent(try RecordedTripsEvent(from: decoder))
                default:
                    self = .appEvent(try AppEvent(from: decoder))
                }
            }

            public var asTripBeganEvent: TripBeganEvent? {
                if case .tripBeganEvent(let val) = self {
                    return val
                }
                return nil
            }

            public var asTripEndedEvent: TripEndedEvent? {
                if case .tripEndedEvent(let val) = self {
                    return val
                }
                return nil
            }

            public var asTripDiscardedEvent: TripDiscardedEvent? {
                if case .tripDiscardedEvent(let val) = self {
                    return val
                }
                return nil
            }

            public var asRecordedTripsEvent: RecordedTripsEvent? {
                if case .recordedTripsEvent(let val) = self {
                    return val
                }
                return nil
            }

            public var id: String {
                switch self {
                case .tripBeganEvent(let val):
                    return val.id
                case .tripEndedEvent(let val):
                    return val.id
                case .tripDiscardedEvent(let val):
                    return val.id
                case .recordedTripsEvent(let val):
                    return val.id
                case .appEvent(let val):
                    return val.id
                }
            }

            public struct TripBeganEvent: Decodable, Identifiable {
                public var id: String
                public var trip: Trip_trip

                public struct Trip_trip: Decodable, Identifiable {
                    public var id: String
                }
            }

            public struct TripEndedEvent: Decodable, Identifiable {
                public var id: String
                public var queuedTrips: [Trip_queuedTrips]

                public struct Trip_queuedTrips: Decodable, Identifiable {
                    public var id: String
                }
            }

            public struct TripDiscardedEvent: Decodable, Identifiable {
                public var id: String
                public var trip: Trip_trip

                public struct Trip_trip: Decodable, Identifiable {
                    public var id: String
                }
            }

            public struct RecordedTripsEvent: Decodable, Identifiable {
                public var id: String
                public var recordedTrips: [Trip_recordedTrips]

                public struct Trip_recordedTrips: Decodable, Identifiable {
                    public var id: String
                }
            }

            public struct AppEvent: Decodable, Identifiable {
                public var id: String
            }
        }
    }
}

extension AppModelPreventGCQuery: Relay.Operation {}